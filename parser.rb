#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.yacc/module_eval...', 'grammar.yacc', 40)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.run(code)
    p @tokens if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.yacc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     3,     4,     3,     4,     7,     6 ]

racc_action_check = [
     1,     0,     0,     6,     6,     5,     1 ]

racc_action_pointer = [
    -6,     0,   nil,   nil,   nil,     5,    -4,   nil,   nil ]

racc_action_default = [
    -5,    -5,    -1,    -3,    -4,    -5,    -5,     9,    -2 ]

racc_goto_table = [
     2,     1,   nil,   nil,   nil,   nil,     8 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 16, :_reduce_1,
  3, 16, :_reduce_2,
  1, 17, :_reduce_3,
  1, 17, :_reduce_4 ]

racc_reduce_n = 5

racc_shift_n = 9

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :END => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "END",
  "$start",
  "Expressions",
  "Expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.yacc', 22)
  def _reduce_1(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.yacc', 23)
  def _reduce_2(val, _values, result)
     result = val[0] << val[2]  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.yacc', 28)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.yacc', 29)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
